type TestData{
    id:ID!
    name:String!
    data:String
    lastModified:String
}

type TestScript{
    id:ID!
    name:String!
    code:String
    lastModified:String
    }

type Connection{
    id:ID!
    name:String!
    host:String!
    username:String!
    password:String!
}

type TestResult{
    id:ID!
    scriptID:ID!
    output:String
    error:String
    status:String
    result:String
    elapsedTime:String
}

type Query{

    #Test Data
    allTestData:[TestData!]
    getTestData(id:Int):TestData
    #Connection
    allConnections:[Connection!]
    getConnection:Connection

    #Test Script
    allTestScript:[TestScript!]
    getTestScript(id:String):TestScript
    evalTestScript(id:String!,tid:Int!):TestResult
}


type Mutation{
    #Test Script
    createTestScript(name:String!):TestScript
    updateTestScript(id:String!,name:String!,code:String):TestScript
    deleteTestScript(id:String!):Boolean
    #Test Data
    createTestData(name : String!):TestData
    updateTestData(id:Int,name:String!,data:String):TestData
    deleteTestData(id:Int):Boolean
    #Connection
    createConnection(name:String!,host:String!,username:String!,password:String!):Connection!
    updateConnection(id:Int!,name:String!,host:String!,username:String!,password:String!):Connection!
    deleteConnection(id:Int!):Boolean


}

